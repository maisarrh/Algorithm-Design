#Radix Sort with Counting Sort as the stable sorting algorithm

def counting_sort(A, d):
    n = len(A)
    output = [0] * (n)
    count = [0] * (10)

    for item in range(0, n):
        index = (A[item] / d)
        count[int((index) % 10)] += 1

    for item in range(1, 10):
        count[item] += count[item - 1]

    i = n - 1
    while i >= 0:
        index = (A[i] / d)
        output[count[int((index) % 10)] - 1] = A[i]
        count[int((index) % 10)] -= 1
        i -= 1

    i = 0
    for i in range(0, len(A)):
        A[i] = output[i]

def radix_sort(A):
    m = max(A)
    d = 1
    while m / d > 0:
        counting_sort(A, d)
        d *= 10

A = [84, 23, 62, 44, 16, 30, 95, 51]
radix_sort(A)
for i in range(len(A)):
    print(A[i]),